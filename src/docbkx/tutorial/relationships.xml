<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_relationships">
    <title>Relationships</title>
    <subtitle>A convincing act</subtitle>
    <para>
        Our application was not very much fun yet, just storing movies and actors. After all,
        the power is in the relationships between them. Fortunately, Neo4j treats relationships as first class citizens,
        allowing them to be addressed individually and have properties assigned to them. That allows for representing them as entities
        if needed.
    </para>
    <section>
        <title>Creating relationships</title>
        <para>
            Relationships without properties ("anonymous" relationships) don't require any <code>@RelationshipEntity</code>
            classes. "Unfortunately" we had none of those, because our relationships were richer.
            Therefore we went with the <code>Role</code> relationship between <code>Movie</code> and <code>Actor</code>.
            It had to be annotated with <code>@RelationshipEntity</code> and the <code>@StartNode</code> and <code>@EndNode</code>
            had to be marked.
            So our Role looked like this:
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="relationship.png" align="center"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            <example>
                <title>Role class</title>
                <programlisting language="java"><![CDATA[@RelationshipEntity
class Role {
    @StartNode Actor actor;
    @EndNode Movie movie;
    String role;
}
]]></programlisting>
            </example>
        </para>
        <para>
            When writing a test for the <code>Role</code> we tried to create the relationship entity just by 
            instantiating it with <code>new</code> and saving it with the template,
            but we got an exception saying that it misses the relationship-type.
        </para>
        <para>
            We had to add it to the <code>@RelationshipEntity</code> as an attribute (or as a @RelationshipType annotated
            field in the RelationshipEntity). Another way to create
            instances of relationship-entities is to use the methods provided by the template, like
            <code>createRelationshipBetween</code>.
<!--            At first this surprised us, but
            then we realized that a relationship entity must have two related entities. It
            turned out that the aspect had introduced a <code>entity.relateTo</code> method in the node entities.
            It turned out to be exactly what we needed. We simply added a method to the Actor class, connecting
            it to movies.
-->
        </para>
        <para>
            <example>
                <title>Relating actors to movies</title>
                <programlisting language="java" ><![CDATA[@RelationshipEntity(type="ACTS_IN")
class Role {
    @StartNode Actor actor;
    @EndNode Movie movie;
    String role;
}
class Actor {
...
    public Role playedIn(Movie movie, String roleName) {
        Role role = new Role(this, movie, roleName);
        this.roles.add(role);
        return role;
    }
}

    Role role = tomHanks.playedIn(forrestGump, "Forrest Gump");

    // either save the actor
    template.save(tomHanks);
    // or the role
    template.save(role);

    // alternative approach
    Role role = template.createRelationshipBetween(actor,movie,
                           Role.class, "ACTS_IN");

]]></programlisting>
            </example>
        </para>
        <para>
            Saving just the actor would take care of relationships with the same type between two entities and remove the duplicates.
            Whereas just saving the role happily creates another relationship with the same type.
            <!-- TODO This should probably changed -->
        </para>
    </section>
    <section>
        <title>Accessing related entities</title>
        <para>
            Now we wanted to find connected entities.
            We already had fields for the relationships in both classes. It was time to annotate them
            correctly. The Neo4j relationship type and direction were easy to figure out.
            The direction even defaulted to outgoing, so we only had to specify it for the movie.
            If we want to use the same relationship between the two entities we have to make sure to provide a
            dedicated type, otherwise the field-names would be used resulting in different relationships.
        </para>
        <para>
            <example>
                <title>@RelatedTo usage</title>
                <programlisting language="java" ><![CDATA[@NodeEntity
class Movie {
    @Indexed(unique=true) String id;
    String title;
    int year;
    @RelatedTo(type = "ACTS_IN", direction = Direction.INCOMING)
    Set<Actor> cast;
}

@NodeEntity
class Actor {
    @Indexed(unique=true) int id;
    String name;
    @RelatedTo(type = "ACTS_IN")
    Set<Movie> movies;

    public Role playedIn(Movie movie, String roleName) {
        return new Role(this,movie, roleName);
    }
}
]]></programlisting>
            </example>
        </para>
        <!--para>
            While reading about these relationship collections, we learned that they are actually
            Spring Data Neo4j-managed sets. So whenever we added or removed something from the set,
            the change automatically gets reflected in the underlying relationships. That's neat! But this
            also meant we did not need to initialize the fields. That could be easy to forget.
        </para-->
        <para>
            Changes to the collections of related entities are reflected into the graph on saving of the entity.
        </para>
        <para>
            We made sure to add some tests for using the relationshhips, so we were assured that the collections worked as
            advertised.
        </para>
    </section>
    <section>
        <title>Accessing the relationship entities</title>
        <para>
            But we still couldn't access the Role relationship entities themselves. It turned out that there was a separate
            annotation <code>@RelatedToVia</code> for accessing the actual relationship entities. And we could
            declare the field as an <code>Iterable&lt;Role&gt;</code>, with read-only semantics or on a
            <code>Collection</code> or <code>Set&lt;Role&gt;</code> field with modifying semantics.
<!--
            This appeared to mean
            that we were not able to add new roles through the field. Adding relationship entities seemed to 
            require <code>entity.relateTo()</code>. The annotation attributes were similar to
            those used for <code>@RelatedTo</code>.
-->
            So off we went, creating our first real relationship (just kidding).
        </para>
        <para>
            To have the collections of relationships being read eagerly during the loading of the Movie we have to annotate it
            with the @Fetch annotation. Otherwise Spring Data Neo4j refrains from following relationships automatically.
            The risk of loading the whole graph into memory would be too high.
        </para>
        <para>
            <example>
                <title>@RelatedToVia usage</title>
                <programlisting language="java" ><![CDATA[@NodeEntity
class Movie {
    @Indexed(unique=true) String id;
    String title;
    int year;

    @Fetch @RelatedToVia(type = "ACTS_IN", direction = Direction.INCOMING)
    Iterable<Roles> roles;
}
]]></programlisting>
            </example>
        </para>
        <para>
            After watching the tests pass, we were confident that the changes to the relationship fields were
            really stored to the underlying relationships in the graph. We were pretty satisfied with persisting
            our domain.
        </para>
    </section>
</chapter>
