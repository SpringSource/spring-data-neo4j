<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:programming-model:indexing">
    <title>Indexing</title>

    <para>
        The Neo4j graph database can use different so-called index providers for exact lookups and fulltext
        searches. Lucene is the default index provider implementation. Each named index is configured to be
        fulltext or exact.
    </para>

    <section>
        <title>Exact and numeric index</title>
        <para>
            When using the standard Neo4j API, nodes and relationships have to be manually indexed with
            key-value pairs, typically being the property name and value. When using Spring Data Neo4j,
            this task is simplified to just adding an <code>@Indexed</code> annotation on entity fields
            by which the entity should be searchable. This will result in automatic updates of the index
            every time an indexed field changes.
        </para>
        <para>
            Numerical fields are indexed numerically so that they are available for range queries. All
            other fields are indexed with their string representation.
        </para>
        <para>
            The @Indexed annotation also provides the option of using a custom index. The default index
            name is the simple class name of the entity, so that each class typically gets its own index.
            It is recommended to not have two entity classes with the same class name, regardless of
            package.
        </para>
        <para>
            The indexes can be queried by using a repository (see
            <xref linkend="reference:programming-model:repositories" />).
            Typically, the repository is an instance of
            <code>org.springframework.data.neo4j.repository.DirectGraphRepositoryFactory</code>.
            The methods <code>findByPropertyValue()</code> and <code>findAllByPropertyValue()</code> work on
            the exact indexes and return the first or all matches. To do range queries, use
            <code>findAllByRange()</code> (please note that currently both values are inclusive).
        </para>
        <example>
            <title>Indexing entities</title>
            <programlisting language="java"><![CDATA[@NodeEntity
class Person {
    @Indexed(indexName = "people") String name;
    @Indexed int age;
}

GraphRepository<Person> graphRepository = template.repositoryFor(Person.class);

// Exact match, in named index
Person mark = graphRepository.findByPropertyValue("people", "name", "mark");

// Numeric range query, index name inferred automatically
for (Person middleAgedDeveloper : graphRepository.findAllByRange("age", 20, 40)) {
    Developer developer=middleAgedDeveloper.projectTo(Developer.class);
}
]]></programlisting>
        </example>

    </section>
    <section>
        <title>Fulltext indexes</title>
        <para>
            Spring Data Neo4j also supports fulltext indexes. By default, indexed fields are stored in
            an exact lookup index. To have them analyzed and prepared for fulltext search, the
            <code>@Indexed</code> annotation has the boolean <code>fulltext</code> attribute.

            Please note that fulltext indexes require a separate index name as the fulltext configuration
            is stored in the index itself.
        </para>
        <para>
            Access to the fulltext index is provided by the <code>findAllByQuery()</code> repository method.
            Wildcards like <code>*</code> are allowed. Generally though, the fulltext querying rules of the
            underlying index provider apply. See the
            <ulink url="http://lucene.apache.org/java/3_0_1/">Lucene documentation</ulink> for more
            information on this.
        </para>
        <para>
            <example>
                <title>Fulltext indexing</title>
                <programlisting language="java"><![CDATA[@NodeEntity
class Person {
    @Indexed(indexName = "people-search", fulltext=true) String name;
}

GraphRepository<Person> graphRepository =
             template.repositoryFor(Person.class);

Person mark = graphRepository.findAllByQuery("people-search", "name", "ma*");
]]></programlisting>
            </example>

        </para>
        <note><para>
            Please note that indexes are currently created on demand, so whenever an index that doesn't exist
            is requested from a query or get operation it is created. This is subject to change but has
            currently the implication that those indexes won't be configured as fulltext which causes
            subsequent fulltext updates to those indexes to fail.
        </para></note>
    </section>
    <section>
        <title>Manual index access</title>
        <para>
            The index for a domain class is also available from <code>GraphDatabaseContext</code> via
            the <code>getIndex()</code> method. The second parameter is optional and takes the index name
            if it should not be inferred from the class name. It returns the index implementation that is
            provided by Neo4j.
        </para>
        <example>
            <title>Manual index usage</title>
            <programlisting language="java"><![CDATA[@Autowired GraphDatabaseContext gdc;

// Default index
Index<Node> personIndex = gdc.getIndex(Person.class);
personIndex.query(new QueryContext(NumericRangeQuery.new√çntRange("age", 20, 40, true, true))
                       .sort(new Sort(new SortField("age", SortField.INT, false))));

// Named index
Index<Node> namedPersonIndex = gdc.getIndex(Person.class, "people");
namedPersonIndex.get("name", "Mark");

// Fulltext index
Index<Node> personFulltextIndex = gdc.getIndex(Person.class, "people-search", true);
personFulltextIndex.query("name", "*cha*");
personFulltextIndex.query("{name:*cha*}");
]]></programlisting>
        </example>
    </section>
    <section>
        <title>Indexing in Neo4jTemplate</title>
        <para>
            Neo4jTemplate also offers index support, providing auto-indexing for fields at creation time.
            There is an <code>autoIndex</code> method that can also add indexes for a set of fields in one go.
        </para>
        <para>
            For querying the index, the template offers query methods that take either the exact match
            parameters or a query object/expression, and push the results wrapped uniformly as Paths to
            the supplied <code>PathMapper</code> to be converted or collected.
        </para>
    </section>
</section>
