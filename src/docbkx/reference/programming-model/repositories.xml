<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:programming-model:repositories" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>CRUD with repositories</title>
    <para>
        The repositories provided by Spring Data Neo4j build on the composable repository infrastructure
        in <ulink url="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#repositories.custom-implementations">Spring Data Commons</ulink>.
        They allow for interface based composition of repositories consisting of provided default
        implementations for certain interfaces and additional custom implementations for other methods.
    </para>
    <!--<note>-->
        <!--<para>-->
            <!--Spring Data Neo4j provides only the infrastructure and some default repository implementations-->
            <!--so far. Future releases will support finders derived from method names, named queries, and-->
            <!--annotated query methods.-->
            <!--(e.g.-->
            <!--<code>findByName(name)</code>,-->
            <!--<code>@Query(name="find-by-name-query") findByName(name)</code>, and-->
            <!--<code>@Query(query="{name:%s}") findByName(name)</code>)-->
        <!--</para>-->
    <!--</note>-->
    <para>
        Spring Data Neo4j repositories support annotated and named queries for the Neo4j
        <ulink url="http://docs.neo4j.org/chunked/milestone/query-lang.html">Cypher</ulink> query-language.
    </para>
    <para>
        Spring Data Neo4j comes with typed repository implementations that provide methods for
        locating node and relationship entities. There are 3 types of basic repository interfaces
        and implementations. <code>CRUDRepository</code> provides basic operations,
        <code>IndexRepository</code> and <code>NamedIndexRepository</code> delegate to Neo4j's internal
        indexing subsystem for queries, and <code>TraversalRepository</code> handles Neo4j traversals.
    </para>
    <para>
        <code>GraphRepository</code> is a convenience repository interface, extending <code>CRUDRepository</code>,
        <code>IndexRepository</code>, and <code>TraversalRepository</code>. Generally, it has all the
        desired repository methods. If named index operations are required, then <code>NamedIndexRepository</code>
        may also be included.
    </para>

    <section>
        <title>CRUDRepository</title>
        <para>
            <code>CRUDRepository</code> delegates to the configured <code>TypeRepresentationStrategy</code>
            (see <xref linkend="reference:programming-model:typerepresentationstrategy"/>)
            for type based queries.
            <variablelist>
                <varlistentry>
                    <term>Load an instance via a Neo4j node id</term>
                    <listitem><para><code>T findOne(id)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Check for existence of a Neo4j node id</term>
                    <listitem><para><code>boolean exists(id)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all nodes of a node entity type</term>
                    <listitem><para><code>Iterable&lt;T&gt; findAll()</code>
                        (supported in future versions:
                        <code>Iterable&lt;T&gt; findAll(Sort)</code> and
                        <code>Page&lt;T&gt; findAll(Pageable)</code>)</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Count the instances of a node entity type</term>
                    <listitem><para><code>Long count()</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Save a graph entity</term>
                    <listitem><para><code>T save(T)</code> and <code>Iterable&lt;T&gt; save(Iterable&lt;T&gt;)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Delete a graph entity</term>
                    <listitem><para><code>void delete(T)</code>, <code>void; delete(Iterable&lt;T&gt;)</code>,
                        and <code>deleteAll()</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Important to note here is that the <code>save</code>, <code>delete</code>, and <code>deleteAll</code>
            methods are only there to conform to the <code>org.springframework.data.repository.Repository</code>
            interface. The recommended way of saving and deleting entities is by using <code>entity.persist()</code>
            and <code>entity.remove()</code>.
        </para>
    </section>

    <section>
        <title>IndexRepository and NamedIndexRepository</title>
        <para>
            <code>IndexRepository</code> works with the indexing subsystem and provides methods to find
            entities by indexed properties, ranged queries, and combinations thereof. The index key is
            the name of the indexed entity field, unless overridden in the <code>@Indexed</code> annotation.
            <variablelist>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with a certain field value</term>
                    <listitem><para><code>Iterable&lt;T> findAllByPropertyValue(key, value)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Get a single entity instance with a certain field value</term>
                    <listitem><para><code>T findByPropertyValue(key, value)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with field values in a certain numerical range (inclusive)</term>
                    <listitem><para><code>Iterable&lt;T> findAllByRange(key, from, to)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with field values matching the given fulltext string or QueryContext query</term>
                    <listitem><para><code>Iterable&lt;T> findAllByQuery(key, queryOrQueryContext)</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            There is also a <code>NamedIndexRepository</code> with the same methods, but with an additional index
            name parameter, making it possible to query any index.
        </para>

    </section>

    <section>
        <title>TraversalRepository</title>
        <para>
            <code>TraversalRepository</code> delegates to the Neo4j traversal framework.
            <variablelist>
                <varlistentry>
                    <term>Iterate over a traversal result</term>
                    <listitem><para><code>Iterable&lt;T> findAllByTraversal(startEntity, traversalDescription)</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>

    <section>
        <title>Cypher queries</title>
        <section>
            <title>Annotated queries</title>
        <para>
            Queries using the Cypher graph query language can be supplied with the <code>@Query</code> annotation.
            That means every method annotated with <code>@Query("start n=(%node) match (n)-->(m) return m")</code>
            will use the supplied query string. The named parameter <code>%node</code> will be replaced by the actual method parameters.
            Node and Relationship-Entities are resolved to their respective id's and all other parameters are
            replaced directly (i.e. Strings, Longs, etc). There is special support for the <code>Sort</code> and <code>Pageable</code>
            parameters from Spring Data Commons, which are supported to add programmatic paging and sorting (alternatively
            static paging and sorting can be supplied in the query string itself).

            For using the named parameters you have to either annotate the parameters of the method with the
            <code>@Param("node")</code> annotation or enable debug symbols.
        </para>
        </section>

        <section>
            <title>Named queries</title>
        <para>Spring Data Neo4j also supports the notion of named queries which are externalized in property-config-files
            (<code>META-INF/neo4j-named-queries.properties</code>). Those files have the format:
            <code>Entity.finderName=query</code> (e.g. <code>Person.findBoss=start p=({p_person}) match (p)&lt;-[:BOSS]-(boss) return boss</code>).
            Otherwise named queries support the same parameters as annotated queries. For using the named parameters you have to either
            annotate the parameters of the method with the <code>@Param("p_person")</code> annotation or enable debug symbols.
        </para>
        </section>
        <section>
            <title>Query results</title>
            <para>Typical results for queries are <code>Iterable&lt;Type&gt;, Iterable&lt;Map&lt;String,Object&gt;&gt;, Type and Page&lt;Type&gt;</code>.
                Nodes and Relationships are converted to their respective Entities (if they exist). Other values are converted
                using the registered Spring conversion services (e.g. enums).
            </para>
        </section>
        <section>
            <title>Cypher examples</title>
            <para>There is a <ulink url="http://neo4j.vidcaster.com/U2Y/introduction-to-cypher">screencast</ulink> available showing many features of the query language.
                The following examples are taken from the cineasts dataset of the tutorial section.
                <variablelist>
                    <varlistentry>
                        <term><code>start n=node(0) return n</code></term>
                        <listitem><para>returns the node with id 0</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') return movie</code></term>
                        <listitem><para>returns the nodes which are indexed with title equal to 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') match (movie)&lt;-[:ACTS_IN]-(actor) return actor.name</code></term>
                        <listitem><para>returns the names of the actors that have a ACTS_IN relationship to the movie node for 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') match (movie)&lt;-[r:RATED]-(user) where r.stars > 3 return user.name, r.stars, r.comment</code></term>
                        <listitem><para>returns users names and their ratings (>3) of the movie titled 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start user=node:User(login='micha') match (user)-[:FRIEND]-(friend)-[r:RATED]->(movie) return movie.title, AVG(r.stars), COUNT(*) order by AVG(r.stars) desc, COUNT(*) desc</code></term>
                        <listitem><para>returns the movies rate by the friends of the user 'micha', aggregated by movie.title, with averaged ratings and rating-counts sorted by both</para></listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </section>
        <xi:include href="../../snippets/SnippetRepositoryDerivedFinder.xml"/>
    </section>

    <section>
        <title>Creating repositories</title>
        <para>
            The <code>Repository</code> instances are either created manually via a
            <code>DirectGraphRepositoryFactory</code>, bound to a concrete node or relationship entity class.
            The <code>DirectGraphRepositoryFactory</code> is configured in the Spring context and can be injected.
        </para>
        <example>
            <title>Using GraphRepositories</title>
            <programlisting language="java"><![CDATA[GraphRepository<Person> graphRepository = template
        .repositoryFor(Person.class);

Person michael = graphRepository.save(new Person("Michael", 36));

Person dave = graphRepository.findOne(123);

Long numberOfPeople = graphRepository.count();

Person mark = graphRepository.findByPropertyValue("name", "mark");

Iterable<Person> devs = graphRepository.findAllByProperyValue("occupation", "developer");

Iterable<Person> middleAgedPeople = graphRepository.findAllByRange("age", 20, 40);

Iterable<Person> aTeam = graphRepository.findAllByQuery("name", "A*");

Iterable<Person> davesFriends = graphRepository.findAllByTraversal(dave,
    Traversal.description().pruneAfterDepth(1)
    .relationships(KNOWS).filter(returnAllButStartNode()));
]]></programlisting>
        </example>
    </section>

    <section>
        <title>Composing repositories</title>
        <para>
            The recommended way of providing repositories is to define a repository interface per domain
            class. The mechanisms provided by the repository infrastructure will automatically detect
            them, along with additional implementation classes, and create an injectable repository
            implementation to be used in services or other spring beans.
        </para>
        <example>
            <title>Composing repositories</title>
            <programlisting language="java"><![CDATA[public interface PersonRepository extends GraphRepository<Person>, PersonRepositoryExtension {}

// alternatively select some of the required repositories individually
public interface PersonRepository extends CRUDGraphRepository<Node,Person>,
        IndexQueryExecutor<Node,Person>, TraversalQueryExecutor<Node,Person>,
        PersonRepositoryExtension {}

// provide a custom extension if needed
public interface PersonRepositoryExtension {
    Iterable<Person> findFriends(Person person);
}

public class PersonRepositoryImpl implements PersonRepositoryExtension {
    // optionally inject default repository, or use DirectGraphRepositoryFactory
    @Autowired PersonRepository baseRepository;
    public Iterable<Person> findFriends(Person person) {
        return baseRepository.findAllByTraversal(person, friendsTraversal);
    }
}

// configure the repositories, preferably via the datagraph:repositories namespace
// (template reference is optional)
<neo4j:repositories base-package="org.springframework.data.neo4j"
    graph-database-context-ref="template"/>

// have it injected
@Autowired
PersonRepository personRepository;

Person michael = personRepository.save(new Person("Michael",36));

Person dave=personRepository.findOne(123);

Iterable<Person> devs = personRepository.findAllByPropertyValue("occupation","developer");

Iterable<Person> aTeam = graphRepository.findAllByQuery( "name","A*");

Iterable<Person> friends = personRepository.findFriends(dave);
]]></programlisting>
        </example>

    </section>
</section>