<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!--
		This will automatically locate any and all property files you have
		within your classpath, provided they fall under the META-INF/spring
		directory. The located property files are parsed and their values can
		then be used within application context files in the form of
		${propertyKey}.
	-->
	<context:property-placeholder location="classpath*:META-INF/spring/database.properties"/>

	<!--
		Turn on AspectJ @Configurable support. As a result, any time you
		instantiate an object, Spring will attempt to perform dependency
		injection on that object. This occurs for instantiation via the "new"
		keyword, as well as via reflection. This is possible because AspectJ
		is used to "weave" Roo-based applications at compile time. In effect
		this feature allows dependency injection of any object at all in your
		system, which is a very useful feature (without @Configurable you'd
		only be able to dependency inject objects acquired from Spring or
		subsequently presented to a specific Spring dependency injection
		method). Roo applications use this useful feature in a number of
		areas, such as @PersistenceContext injection into entities.
	-->
	<context:spring-configured/>

	<!-- 
	    Start datastore config
    -->

	<bean id="neo4jNodeBacking" class="org.springframework.data.neo4j.aspects.support.node.Neo4jNodeBacking" factory-method="aspectOf">
		<property name="template" ref="neo4jTemplate"/>
		<property name="nodeEntityStateFactory" ref="nodeEntityStateFactory"/>
	</bean>

	<bean class="org.springframework.data.neo4j.aspects.support.relationship.Neo4jRelationshipBacking" factory-method="aspectOf">
		<property name="template" ref="neo4jTemplate"/>
		<property name="relationshipEntityStateFactory" ref="relationshipEntityStateFactory"/>
	</bean>

	
	<bean id="graphDatabaseService" class="org.neo4j.test.ImpermanentGraphDatabase"
			destroy-method="shutdown" scope="singleton">
	</bean>

    <bean id="graphDatabase" class="org.springframework.data.neo4j.support.DelegatingGraphDatabase">
        <constructor-arg ref="graphDatabaseService"/>
    </bean>

    <bean id="mappingInfrastructure" class="org.springframework.data.neo4j.support.MappingInfrastructure">
        <property name="graphDatabaseService" ref="graphDatabaseService"/>
        <property name="conversionService">
            <bean class="org.springframework.data.neo4j.fieldaccess.Neo4jConversionServiceFactoryBean"/>
        </property>
        <property name="nodeTypeRepresentationStrategy" ref="nodeTypeRepresentationStrategy"/>
        <property name="relationshipTypeRepresentationStrategy" ref="relationshipTypeRepresentationStrategy"/>
        <property name="typeRepresentationStrategyFactory" ref="typeRepresentationStrategyFactory"/>
        <property name="entityStateHandler" ref="entityStateHandler"/>
        <property name="mappingContext" ref="mappingContext"/>
        <property name="graphDatabase" ref="graphDatabase"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="neo4jTemplate" class="org.springframework.data.neo4j.support.Neo4jTemplate">
        <property name="infrastructure" ref="mappingInfrastructure"/>
    </bean>
    <bean id="graphEntityInstantiator" class="org.springframework.data.neo4j.cross_store.support.node.CrossStoreNodeEntityInstantiator">
        <constructor-arg ref="nodeEntityInstantiator"/>
        <constructor-arg ref="entityManagerFactory"/>
    </bean>
    <bean id="entityStateHandler" class="org.springframework.data.neo4j.support.mapping.EntityStateHandler">
        <constructor-arg ref="mappingContext"/>
        <constructor-arg ref="graphDatabase"/>
    </bean>
    <bean id="relationshipEntityInstantiator" class="org.springframework.data.neo4j.support.relationship.RelationshipEntityInstantiator">
        <constructor-arg ref="entityStateHandler"/>
    </bean>

    <bean id="nodeEntityInstantiator" class="org.springframework.data.neo4j.support.node.NodeEntityInstantiator">
        <constructor-arg ref="entityStateHandler"/>
    </bean>

    <bean id="typeRepresentationStrategyFactory" class="org.springframework.data.neo4j.support.typerepresentation.TypeRepresentationStrategyFactory">
        <constructor-arg ref="graphDatabase"/>
    </bean>

    <bean id="nodeTypeRepresentationStrategy" factory-bean="typeRepresentationStrategyFactory" factory-method="getNodeTypeRepresentationStrategy" />
    <bean id="relationshipTypeRepresentationStrategy" factory-bean="typeRepresentationStrategyFactory" factory-method="getRelationshipTypeRepresentationStrategy"/>

    <bean id="nodeEntityStateFactory" class="org.springframework.data.neo4j.cross_store.support.node.CrossStoreNodeEntityStateFactory">
    	<property name="nodeDelegatingFieldAccessorFactory">
		    <bean class="org.springframework.data.neo4j.fieldaccess.NodeDelegatingFieldAccessorFactory">
		        <constructor-arg ref="neo4jTemplate"/>
		    </bean>
    	</property>
    	<property name="template" ref="neo4jTemplate"/>
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
		<property name="mappingContext" ref="mappingContext"/>
    </bean>

    <bean id="mappingContext" class="org.springframework.data.neo4j.support.mapping.Neo4jMappingContext"/>


    <bean id="relationshipEntityStateFactory" class="org.springframework.data.neo4j.support.relationship.RelationshipEntityStateFactory">
    	<property name="relationshipDelegatingFieldAccessorFactory">
		    <bean class="org.springframework.data.neo4j.fieldaccess.RelationshipDelegatingFieldAccessorFactory">
		        <constructor-arg ref="neo4jTemplate"/>
		    </bean>
    	</property>
    	<property name="template" ref="neo4jTemplate"/>
    	<property name="mappingContext" ref="mappingContext"/>
    </bean>
    

    <bean id="transactionManager" class="org.springframework.data.neo4j.transaction.ChainedTransactionManager" >
		<constructor-arg>
            <list>
            <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="jpaTransactionManager">
                <property name="entityManagerFactory" ref="entityManagerFactory"/>
            </bean>
			<bean
			    class="org.springframework.transaction.jta.JtaTransactionManager">
			    <property name="transactionManager">
                    <bean class="org.neo4j.kernel.impl.transaction.SpringTransactionManager">
                        <constructor-arg ref="graphDatabaseService" />
                    </bean>
			    </property>
			    <property name="userTransaction">
                    <bean  class="org.neo4j.kernel.impl.transaction.UserTransactionImpl">
                        <constructor-arg value="#{graphDatabaseService.txManager}" />
                    </bean>
			    </property>
			</bean>
            </list>
		</constructor-arg>
	</bean>

	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="driverClassName" value="${database.driverClassName}"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
    </bean>
 
    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>

    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory" depends-on="neo4jNodeBacking">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
    </bean>

    <bean id="entityManager" class="org.springframework.orm.jpa.SharedEntityManagerCreator" factory-method="createSharedEntityManager">
        <constructor-arg ref="entityManagerFactory"/>
    </bean>
</beans>
